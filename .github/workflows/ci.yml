name: CI

on:
  push:
  pull_request:

env:
  CARGO_TERM_COLOR: always
  # XXX: https://github.com/actions/partner-runner-images/issues/27
  XDG_CONFIG_HOME: ~/.config

jobs:
  linux-native:
    timeout-minutes: 3
    runs-on: ${{ matrix.machine.os }}
    if: success() || failure()
    strategy:
      fail-fast: false
      matrix:
        libc: [gnu, musl]
        machine:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-24.04-arm
            arch: aarch64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rustup
        if: matrix.machine.arch == 'aarch64'
        run: curl https://sh.rustup.rs -sSf | sh -s -- -y && echo "$HOME/.cargo/bin" >>"$GITHUB_PATH"
      - name: Install Rust
        run: rustup update nightly && rustup default nightly
      - name: Add target
        run: rustup target add ${{ matrix.machine.arch }}-unknown-linux-${{ matrix.libc }}
      - name: Test with panic backend (debug)
        run: LITHIUM_BACKEND=panic cargo test --target ${{ matrix.machine.arch }}-unknown-linux-${{ matrix.libc }}
      - name: Test with Itanium backend (debug)
        run: LITHIUM_BACKEND=itanium cargo test --target ${{ matrix.machine.arch }}-unknown-linux-${{ matrix.libc }}
      - name: Test without std (debug)
        run: cargo test --target ${{ matrix.machine.arch }}-unknown-linux-${{ matrix.libc }} --no-default-features
      - name: Test with panic backend (release)
        run: LITHIUM_BACKEND=panic cargo test --target ${{ matrix.machine.arch }}-unknown-linux-${{ matrix.libc }} --release
      - name: Test with Itanium backend (release)
        run: LITHIUM_BACKEND=itanium cargo test --target ${{ matrix.machine.arch }}-unknown-linux-${{ matrix.libc }} --release
      - name: Test without std (release)
        run: cargo test --target ${{ matrix.machine.arch }}-unknown-linux-${{ matrix.libc }} --release --no-default-features

  linux-cross:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    if: success() || failure()
    strategy:
      fail-fast: false
      matrix:
        target:
          - aarch64-linux-android
          - arm-linux-androideabi
          - armv7-linux-androideabi
          - arm-unknown-linux-gnueabi
          - arm-unknown-linux-gnueabihf
          - arm-unknown-linux-musleabi
          - arm-unknown-linux-musleabihf
          - armv7-unknown-linux-gnueabihf
          - i686-pc-windows-gnu  # runs under wine, Itanium
          - i686-unknown-linux-gnu
          - i686-unknown-linux-musl
          - loongarch64-unknown-linux-gnu
          - loongarch64-unknown-linux-musl
          - mips64-unknown-linux-gnuabi64
          - mips64el-unknown-linux-gnuabi64
          - powerpc64-unknown-linux-gnu
          - powerpc64le-unknown-linux-gnu
          - riscv64gc-unknown-linux-gnu
          - s390x-unknown-linux-gnu
          - sparc64-unknown-linux-gnu
          - x86_64-pc-windows-gnu  # runs under wine, Itanium
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        run: rustup update nightly && rustup default nightly
      - name: Install Cross
        run: cargo install cross --git https://github.com/cross-rs/cross
      - name: Test with panic backend (debug)
        run: LITHIUM_BACKEND=panic cross test --target ${{ matrix.target }}
      - name: Test with Itanium backend (debug)
        run: LITHIUM_BACKEND=itanium cross test --target ${{ matrix.target }}
      - name: Test without std (debug)
        run: cross test --target ${{ matrix.target }} --no-default-features
      - name: Test with panic backend (release)
        run: LITHIUM_BACKEND=panic cross test --target ${{ matrix.target }} --release
      - name: Test with Itanium backend (release)
        run: LITHIUM_BACKEND=itanium cross test --target ${{ matrix.target }} --release
      - name: Test without std (release)
        run: cross test --target ${{ matrix.target }} --release --no-default-features

  xwin-cross:
    timeout-minutes: 10
    runs-on: ${{ matrix.machine.os }}
    if: success() || failure()
    strategy:
      fail-fast: false
      matrix:
        machine:
          - os: ubuntu-latest
            xwin_arch: x86_64
            arch: amd64
            target: x86_64-pc-windows-msvc
          - os: ubuntu-latest
            xwin_arch: x86
            arch: i386
            target: i686-pc-windows-msvc
          # XXX: Wine is hanging during initial startup on arm64???
          # - os: ubuntu-24.04-arm
          #   xwin_arch: aarch64
          #   arch: arm64
          #   target: aarch64-pc-windows-msvc
    env:
      XWIN_ARCH: ${{ matrix.machine.xwin_arch }}
      WINEDEBUG: fixme+all,err+all
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        run: rustup update nightly && rustup default nightly && rustup target add ${{ matrix.machine.target }}
      - name: Install cargo-xwin
        run: cargo install --locked cargo-xwin
      - name: Install wine
        run: |
          set -exuo pipefail
          sudo dpkg --add-architecture ${{ matrix.machine.arch }}
          sudo apt-get update
          sudo apt install wine:${{ matrix.machine.arch }}
          wineboot
      - name: Test with panic backend (debug)
        run: LITHIUM_BACKEND=panic cargo xwin test --target ${{ matrix.machine.target }}
      - name: Test with SEH backend (debug)
        run: LITHIUM_BACKEND=seh cargo xwin test --target ${{ matrix.machine.target }}
      - name: Test without std (debug)
        run: cargo xwin test --target ${{ matrix.machine.target }} --no-default-features
      - name: Test with panic backend (release)
        run: LITHIUM_BACKEND=panic cargo xwin test --target ${{ matrix.machine.target }} --release
      - name: Test with SEH backend (release)
        run: LITHIUM_BACKEND=seh cargo xwin test --target ${{ matrix.machine.target }} --release
      - name: Test without std (release)
        run: cargo xwin test --target ${{ matrix.machine.target }} --release --no-default-features

  emscripten:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    if: success() || failure()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        run: rustup update nightly && rustup default nightly
      - name: Install Cross
        run: cargo install cross --git https://github.com/cross-rs/cross
      - name: Test with panic backend (debug)
        run: LITHIUM_BACKEND=panic cross test --target wasm32-unknown-emscripten
      - name: Test with Emscripten backend (debug)
        run: LITHIUM_BACKEND=emscripten cross test --target wasm32-unknown-emscripten
      - name: Test with panic backend (release)
        run: LITHIUM_BACKEND=panic cross test --target wasm32-unknown-emscripten --release
      - name: Test with Emscripten backend (release)
        run: LITHIUM_BACKEND=emscripten cross test --target wasm32-unknown-emscripten --release

  wasi:
    timeout-minutes: 3
    runs-on: ubuntu-latest
    if: success() || failure()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: 22
      - name: Install Rust
        run: rustup update nightly && rustup default nightly
      - name: Add target
        run: rustup target add wasm32-wasip1
      - name: Install rust-src
        run: rustup component add rust-src
      - name: Test with panic backend (debug)
        run: LITHIUM_BACKEND=panic ci/cargo-wasi test --target wasm32-wasip1
      - name: Test with Itanium backend (debug)
        run: LITHIUM_BACKEND=itanium ci/cargo-wasi test --target wasm32-wasip1
      - name: Test without std (debug)
        run: ci/cargo-wasi test --target wasm32-wasip1 --no-default-features
      # XXX: Upstream bug at https://github.com/rust-lang/rust/issues/132416
      # - name: Test with panic backend (release)
      #   run: LITHIUM_BACKEND=panic ci/cargo-wasi test --target wasm32-wasip1 --release
      # - name: Test with Itanium backend (release)
      #   run: LITHIUM_BACKEND=itanium ci/cargo-wasi test --target wasm32-wasip1 --release
      # - name: Test without std (release)
      #   run: ci/cargo-wasi test --target wasm32-wasip1 --release --no-default-features

  darwin:
    timeout-minutes: 3
    runs-on: ${{ matrix.os }}
    if: success() || failure()
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-13  # x86_64
          - macos-15  # aarch64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        run: rustup update nightly && rustup default nightly
      - name: Test with panic backend (debug)
        run: LITHIUM_BACKEND=panic cargo test
      - name: Test with Itanium backend (debug)
        run: LITHIUM_BACKEND=itanium cargo test
      - name: Test without std (debug)
        run: cargo test
      - name: Test with panic backend (release)
        run: LITHIUM_BACKEND=panic cargo test --release
      - name: Test with Itanium backend (release)
        run: LITHIUM_BACKEND=itanium cargo test --release
      - name: Test without std (release)
        run: cargo test --release

  windows:
    timeout-minutes: 5
    runs-on: windows-latest
    if: success() || failure()
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, i686]
        abi: [msvc, gnu]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set default-host
        run: rustup set default-host ${{ matrix.arch }}-pc-windows-${{ matrix.abi }}
      - name: Install Rust
        run: rustup update nightly && rustup default nightly
      - name: Test with panic backend (debug)
        run: set LITHIUM_BACKEND=panic && cargo test
      - name: Test with SEH backend (debug)
        if: matrix.abi == 'msvc'
        run: set LITHIUM_BACKEND=seh && cargo test
      - name: Test with Itanium backend (debug)
        if: matrix.abi == 'gnu'
        run: set LITHIUM_BACKEND=itanium && cargo test
      - name: Test without std (debug)
        run: cargo test --no-default-features
      - name: Test with panic backend (release)
        run: set LITHIUM_BACKEND=panic && cargo test --release
      - name: Test with SEH backend (release)
        if: matrix.abi == 'msvc'
        run: set LITHIUM_BACKEND=seh && cargo test --release
      - name: Test with Itanium backend (release)
        if: matrix.abi == 'gnu'
        run: set LITHIUM_BACKEND=itanium && cargo test --release
      - name: Test without std (release)
        run: cargo test --release --no-default-features

  miri-linux:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    if: success() || failure()
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - i686-unknown-linux-gnu
          - powerpc64-unknown-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        run: rustup update nightly && rustup default nightly
      - name: Install Miri
        run: rustup component add miri
      - name: Add target
        run: rustup target add ${{ matrix.target }}
      - name: Test with panic backend
        run: LITHIUM_BACKEND=panic cargo miri test --target ${{ matrix.target }}
      - name: Test with Itanium backend
        run: LITHIUM_BACKEND=itanium cargo miri test --target ${{ matrix.target }}
      - name: Test without std
        run: cargo miri test --target ${{ matrix.target }} --no-default-features

  valgrind:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    env:
      RUSTC_BOOTSTRAP: '1'
    if: success() || failure()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      # XXX: nightly currently suffers from a leak, so pin to beta
      # https://github.com/rust-lang/rust/issues/135608
      - name: Install Rust
        run: rustup update beta && rustup default beta
      - name: Install cargo valgrind
        run: sudo apt-get update && sudo apt-get install valgrind && cargo install cargo-valgrind
      - name: Test with panic backend (debug)
        run: LITHIUM_BACKEND=panic cargo valgrind test
      - name: Test with Itanium backend (debug)
        run: LITHIUM_BACKEND=itanium cargo valgrind test
      - name: Test without std (debug)
        run: cargo valgrind test --no-default-features
      - name: Test with panic backend (release)
        run: LITHIUM_BACKEND=panic cargo valgrind test --release
      - name: Test with Itanium backend (release)
        run: LITHIUM_BACKEND=itanium cargo valgrind test --release
      - name: Test without std (release)
        run: cargo valgrind test --release --no-default-features

  test-stable:
    timeout-minutes: 3
    runs-on: ubuntu-latest
    if: success() || failure()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        run: rustup update stable && rustup default stable
      - name: Test with panic backend (debug)
        run: cargo test
      - name: Test with panic backend (release)
        run: cargo test --release

  lint:
    timeout-minutes: 1
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        backend: [panic, itanium, seh, emscripten]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Rust
        run: rustup update nightly && rustup default nightly
      - name: Install rustfmt and clippy
        run: rustup component add rustfmt clippy
      - name: Rustfmt
        run: LITHIUM_BACKEND=${{ matrix.backend }} cargo fmt -- --check
      - name: Clippy
        run: LITHIUM_BACKEND=${{ matrix.backend }} cargo clippy -- -D warnings
      - name: Clippy without std
        if: matrix.backend != 'panic'
        run: LITHIUM_BACKEND=${{ matrix.backend }} cargo clippy --no-default-features -- -D warnings
